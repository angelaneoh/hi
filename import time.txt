import time
from RPLCD.i2c import CharLCD
from time import sleep
import RPi.GPIO as GPIO
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from mfrc522 import SimpleMFRC522

# Define the scope and credentials to access Google Sheets API
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials = ServiceAccountCredentials.from_json_keyfile_name('/home/angela/fyp coding/quixotic-geode-401107-f793bec2b8a7.json', scope)


# Authenticate with Google Sheets API
client = gspread.authorize(credentials)

# Open the Google Sheet by its title
spreadsheet = client.open('Store Inventory Management Vending Machine')

# Access the specific sheet by its index (indexing starts from 0)
specific_sheet = spreadsheet.get_worksheet(5)  # 2 is the index of the third sheet

# Access the specific sheet by its title
specific_sheet = spreadsheet.worksheet('Customer')


GPIO.setmode(GPIO.BCM)  # Set pin numbering mode to BCM
GPIO.setwarnings(False)

lcd = CharLCD('PCF8574', 0x27)
lcd.cursor_pos = (0, 0)

L1 = 5
L2 = 6
L3 = 13
L4 = 19

C1 = 12
C2 = 16
C3 = 20
C4 = 21

framebuffer = [
    '',
    '',
]

# Define your keypad function here (assuming you already have the implementation)
def read_keypad():
    GPIO.setup([L1, L2, L3, L4], GPIO.OUT)
    GPIO.setup([C1, C2, C3, C4], GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

    keys = [
        ["1", "2", "3", "A"],
        ["4", "5", "6", "B"],
        ["7", "8", "9", "C"],
        ["*", "0", "#", "D"]
    ]

    for i in range(4):
        GPIO.output([L1, L2, L3, L4][i], GPIO.HIGH)
        for j in range(4):
            if GPIO.input([C1, C2, C3, C4][j]) == GPIO.HIGH:
                return keys[i][j]

    return None

def write_to_lcd(lcd, framebuffer, num_cols):
    lcd.home()
    for row in framebuffer:
        lcd.write_string(row.ljust(num_cols)[:num_cols])
        lcd.write_string('\r\n')

def long_text(text, num_cols=20):
    slide_count = 0  # Counter to keep track of the number of slides
    if len(text) < num_cols:
        lcd.write_string(text)
        sleep(1)  # Sleep for a short duration to show the complete text
    else:
        for i in range(len(text) - num_cols + 1):
            slide_count += 1  # Increment the slide counter
            framebuffer[1] = text[i:i + num_cols]
            write_to_lcd(lcd, framebuffer, num_cols)
            sleep(0.2)

            lcd.cursor_pos = (1, 0)
    
    return slide_count  # Return the total number of slides

# Initialize a variable to track whether the welcome message is displayed
# Initialize the welcome_displayed flag
# Initialize the welcome_displayed flag and timestamp for last button press
welcome_displayed = True
last_button_press_time = time.time()


        

# Loop indefinitely
while True:
    # Read RFID tag
    scanned_tag = read_rfid()  # Implement the read_rfid() function to get the scanned RFID tag

    # Print scanned tag for troubleshooting
    print(f"Scanned RFID Tag: {scanned_tag}")

    # Handle RFID scanning and validation process
    if scanned_tag is not None and not rfid_scanning and not tag_validated:
        rfid_scanning = True  # Set the flag to indicate RFID scanning is in progress
        lcd.clear()
        lcd.write_string("Scanning tag...")
        sleep(1)  # Simulate RFID scanning time

        # Check if the scanned tag is in the Google Sheet
        tag_found = False
        customer_name = ""
        customer_balance = 0

        for row in specific_sheet.get_all_records():
            if row['RFID Tag ID'] == scanned_tag:  # Assuming 'RFID Tag ID' is the header in the sheet
                tag_found = True
                customer_name = row['Customer Name']  # Get customer name from the sheet
                customer_balance = row['Balance']  # Get customer balance from the sheet
                lcd.clear()
                lcd.write_string(f"Welcome, {customer_name}!")
                lcd.cursor_pos = (1, 0)
                lcd.write_string(f"Balance: {customer_balance}")
                break

        # If the tag is not found, show an error message
        if not tag_found:
            lcd.clear()
            lcd.write_string("Invalid tag.")
            sleep(2)  # Show error message for 2 seconds

        rfid_scanning = False  # Reset RFID scanning flag after scanning is completed
        tag_validated = tag_found  # Update tag validation flag based on the result

    # Your keypad input handling code goes here...
    # ...
